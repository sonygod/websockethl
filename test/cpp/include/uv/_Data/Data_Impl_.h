// Generated by Haxe 4.2.0-rc.1+d0fd88b9b
#ifndef INCLUDED_uv__Data_Data_Impl_
#define INCLUDED_uv__Data_Data_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(uv,_Data,Data_Impl_)

namespace uv{
namespace _Data{


class HXCPP_CLASS_ATTRIBUTES Data_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Data_Impl__obj OBJ_;
		Data_Impl__obj();

	public:
		enum { _hx_ClassId = 0x65b43192 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="uv._Data.Data_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"uv._Data.Data_Impl_"); }

		inline static ::hx::ObjectPtr< Data_Impl__obj > __new() {
			::hx::ObjectPtr< Data_Impl__obj > __this = new Data_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Data_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Data_Impl__obj *__this = (Data_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Data_Impl__obj), false, "uv._Data.Data_Impl_"));
			*(void **)__this = Data_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Data_Impl__obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Data_Impl_",6a,92,47,fa); }

		static void* fromPointer(::cpp::Pointer<  ::Dynamic > v);

		static ::cpp::Pointer<  ::Dynamic > toPointer(void* this1);

		static void* fromAny( ::Dynamic v);

		static  ::Dynamic toAny(void* this1);

};

} // end namespace uv
} // end namespace _Data

#endif /* INCLUDED_uv__Data_Data_Impl_ */ 
