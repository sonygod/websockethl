// Generated by Haxe 4.2.0-rc.1+d0fd88b9b
#ifndef INCLUDED_Foo
#define INCLUDED_Foo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_0f1da2a7ba9c7167
#define INCLUDED_0f1da2a7ba9c7167
#include "linc_uv.h"
#endif
HX_DECLARE_CLASS0(Foo)



class HXCPP_CLASS_ATTRIBUTES Foo_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Foo_obj OBJ_;
		Foo_obj();

	public:
		enum { _hx_ClassId = 0x7ed9c37a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Foo")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"Foo"); }

		inline static ::hx::ObjectPtr< Foo_obj > __new() {
			::hx::ObjectPtr< Foo_obj > __this = new Foo_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Foo_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Foo_obj *__this = (Foo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Foo_obj), false, "Foo"));
			*(void **)__this = Foo_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Foo_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Foo",e6,7e,35,00); }

		static void foo();
		static ::Dynamic foo_dyn();

		static void onConnection( uv_stream_t* stream,int status);

		static void onAlloc( uv_handle_t* handle,size_t suggestedSize, uv_buf_t* buf);

		static void onRead( uv_stream_t* handle,ssize_t nread,const  uv_buf_t* buf);

		static void onWrite( uv_write_t* handle,int status);

		static void onConnect( uv_connect_t* req,int status);

		static void onResolve( uv_getaddrinfo_t* resolver,int status, addrinfo* res);

		static void signal( uv_loop_t* loop);

		static void onStart( uv_signal_t* signal,int signum);

};


#endif /* INCLUDED_Foo */ 
