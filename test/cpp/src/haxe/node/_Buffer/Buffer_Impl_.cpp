// Generated by Haxe 4.2.0-rc.1+d0fd88b9b
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io__UInt8Array_UInt8Array_Impl_
#include <haxe/io/_UInt8Array/UInt8Array_Impl_.h>
#endif
#ifndef INCLUDED_haxe_node__Buffer_Buffer_Impl_
#include <haxe/node/_Buffer/Buffer_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_8__new,"haxe.node._Buffer.Buffer_Impl_","_new",0x2c3f2f3c,"haxe.node._Buffer.Buffer_Impl_._new","haxe/node/Buffer.hx",8,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_10_alloc,"haxe.node._Buffer.Buffer_Impl_","alloc",0xb08a2a3a,"haxe.node._Buffer.Buffer_Impl_.alloc","haxe/node/Buffer.hx",10,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_14_readUInt8,"haxe.node._Buffer.Buffer_Impl_","readUInt8",0x5a6ae88d,"haxe.node._Buffer.Buffer_Impl_.readUInt8","haxe/node/Buffer.hx",14,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_18_readInt8,"haxe.node._Buffer.Buffer_Impl_","readInt8",0x8814c23a,"haxe.node._Buffer.Buffer_Impl_.readInt8","haxe/node/Buffer.hx",18,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_22_complement8,"haxe.node._Buffer.Buffer_Impl_","complement8",0xd232ee17,"haxe.node._Buffer.Buffer_Impl_.complement8","haxe/node/Buffer.hx",22,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_26_complement16,"haxe.node._Buffer.Buffer_Impl_","complement16",0x1a5d6026,"haxe.node._Buffer.Buffer_Impl_.complement16","haxe/node/Buffer.hx",26,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_30_readUInt16LE,"haxe.node._Buffer.Buffer_Impl_","readUInt16LE",0x3611eb69,"haxe.node._Buffer.Buffer_Impl_.readUInt16LE","haxe/node/Buffer.hx",30,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_34_readUInt16BE,"haxe.node._Buffer.Buffer_Impl_","readUInt16BE",0x3611e2b3,"haxe.node._Buffer.Buffer_Impl_.readUInt16BE","haxe/node/Buffer.hx",34,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_38_readInt16LE,"haxe.node._Buffer.Buffer_Impl_","readInt16LE",0x19af9bdc,"haxe.node._Buffer.Buffer_Impl_.readInt16LE","haxe/node/Buffer.hx",38,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_42_readInt16BE,"haxe.node._Buffer.Buffer_Impl_","readInt16BE",0x19af9326,"haxe.node._Buffer.Buffer_Impl_.readInt16BE","haxe/node/Buffer.hx",42,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_46_readUInt32LE,"haxe.node._Buffer.Buffer_Impl_","readUInt32LE",0x37614fa3,"haxe.node._Buffer.Buffer_Impl_.readUInt32LE","haxe/node/Buffer.hx",46,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_50_readUInt32BE,"haxe.node._Buffer.Buffer_Impl_","readUInt32BE",0x376146ed,"haxe.node._Buffer.Buffer_Impl_.readUInt32BE","haxe/node/Buffer.hx",50,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_54_readInt32LE,"haxe.node._Buffer.Buffer_Impl_","readInt32LE",0x1aff0016,"haxe.node._Buffer.Buffer_Impl_.readInt32LE","haxe/node/Buffer.hx",54,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_58_readInt32BE,"haxe.node._Buffer.Buffer_Impl_","readInt32BE",0x1afef760,"haxe.node._Buffer.Buffer_Impl_.readInt32BE","haxe/node/Buffer.hx",58,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_61_readUInt64LE,"haxe.node._Buffer.Buffer_Impl_","readUInt64LE",0x395e7802,"haxe.node._Buffer.Buffer_Impl_.readUInt64LE","haxe/node/Buffer.hx",61,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_69_readUInt64BE,"haxe.node._Buffer.Buffer_Impl_","readUInt64BE",0x395e6f4c,"haxe.node._Buffer.Buffer_Impl_.readUInt64BE","haxe/node/Buffer.hx",69,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_78_writeUInt8,"haxe.node._Buffer.Buffer_Impl_","writeUInt8",0xd3cdba3a,"haxe.node._Buffer.Buffer_Impl_.writeUInt8","haxe/node/Buffer.hx",78,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_82_writeInt8,"haxe.node._Buffer.Buffer_Impl_","writeInt8",0x497c852d,"haxe.node._Buffer.Buffer_Impl_.writeInt8","haxe/node/Buffer.hx",82,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_85_writeUInt16LE,"haxe.node._Buffer.Buffer_Impl_","writeUInt16LE",0xdde1a3dc,"haxe.node._Buffer.Buffer_Impl_.writeUInt16LE","haxe/node/Buffer.hx",85,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_90_writeUInt16BE,"haxe.node._Buffer.Buffer_Impl_","writeUInt16BE",0xdde19b26,"haxe.node._Buffer.Buffer_Impl_.writeUInt16BE","haxe/node/Buffer.hx",90,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_95_writeInt16LE,"haxe.node._Buffer.Buffer_Impl_","writeInt16LE",0xceabf2c9,"haxe.node._Buffer.Buffer_Impl_.writeInt16LE","haxe/node/Buffer.hx",95,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_100_writeInt16BE,"haxe.node._Buffer.Buffer_Impl_","writeInt16BE",0xceabea13,"haxe.node._Buffer.Buffer_Impl_.writeInt16BE","haxe/node/Buffer.hx",100,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_105_writeUInt32LE,"haxe.node._Buffer.Buffer_Impl_","writeUInt32LE",0xdf310816,"haxe.node._Buffer.Buffer_Impl_.writeUInt32LE","haxe/node/Buffer.hx",105,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_112_writeUInt32BE,"haxe.node._Buffer.Buffer_Impl_","writeUInt32BE",0xdf30ff60,"haxe.node._Buffer.Buffer_Impl_.writeUInt32BE","haxe/node/Buffer.hx",112,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_120_writeInt32LE,"haxe.node._Buffer.Buffer_Impl_","writeInt32LE",0xcffb5703,"haxe.node._Buffer.Buffer_Impl_.writeInt32LE","haxe/node/Buffer.hx",120,0x6403a31a)
HX_LOCAL_STACK_FRAME(_hx_pos_2c17d17683ccc32a_124_writeInt32BE,"haxe.node._Buffer.Buffer_Impl_","writeInt32BE",0xcffb4e4d,"haxe.node._Buffer.Buffer_Impl_.writeInt32BE","haxe/node/Buffer.hx",124,0x6403a31a)
namespace haxe{
namespace node{
namespace _Buffer{

void Buffer_Impl__obj::__construct() { }

Dynamic Buffer_Impl__obj::__CreateEmpty() { return new Buffer_Impl__obj; }

void *Buffer_Impl__obj::_hx_vtable = 0;

Dynamic Buffer_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Buffer_Impl__obj > _hx_result = new Buffer_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Buffer_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00f71dcf;
}

 ::haxe::io::ArrayBufferViewImpl Buffer_Impl__obj::_new(int n){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_8__new)
HXDLIN(   8)		 ::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::_UInt8Array::UInt8Array_Impl__obj::fromBytes(::haxe::io::Bytes_obj::alloc(n),null(),null());
HXDLIN(   8)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Buffer_Impl__obj,_new,return )

 ::haxe::io::ArrayBufferViewImpl Buffer_Impl__obj::alloc(int size){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_10_alloc)
HXDLIN(  10)		 ::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::_UInt8Array::UInt8Array_Impl__obj::fromBytes(::haxe::io::Bytes_obj::alloc(size),null(),null());
HXDLIN(  10)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Buffer_Impl__obj,alloc,return )

int Buffer_Impl__obj::readUInt8( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_14_readUInt8)
HXDLIN(  14)		return ( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readUInt8,return )

int Buffer_Impl__obj::readInt8( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_18_readInt8)
HXDLIN(  18)		int value = ( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) );
HXDLIN(  18)		if ((value < 128)) {
HXDLIN(  18)			return value;
            		}
            		else {
HXDLIN(  18)			return (value - 256);
            		}
HXDLIN(  18)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readInt8,return )

int Buffer_Impl__obj::complement8( ::haxe::io::ArrayBufferViewImpl this1,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_22_complement8)
HXDLIN(  22)		if ((value < 128)) {
HXDLIN(  22)			return value;
            		}
            		else {
HXDLIN(  22)			return (value - 256);
            		}
HXDLIN(  22)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,complement8,return )

int Buffer_Impl__obj::complement16( ::haxe::io::ArrayBufferViewImpl this1,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_26_complement16)
HXDLIN(  26)		if ((value < 32768)) {
HXDLIN(  26)			return value;
            		}
            		else {
HXDLIN(  26)			return (value - 65536);
            		}
HXDLIN(  26)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,complement16,return )

int Buffer_Impl__obj::readUInt16LE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_30_readUInt16LE)
HXDLIN(  30)		return ((( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 8) | ( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readUInt16LE,return )

int Buffer_Impl__obj::readUInt16BE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_34_readUInt16BE)
HXDLIN(  34)		return ((( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ) << 8) | ( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readUInt16BE,return )

int Buffer_Impl__obj::readInt16LE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_38_readInt16LE)
HXDLIN(  38)		int value = ((( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 8) | ( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ));
HXDLIN(  38)		if ((value < 32768)) {
HXDLIN(  38)			return value;
            		}
            		else {
HXDLIN(  38)			return (value - 65536);
            		}
HXDLIN(  38)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readInt16LE,return )

int Buffer_Impl__obj::readInt16BE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_42_readInt16BE)
HXDLIN(  42)		int value = ((( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ) << 8) | ( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ));
HXDLIN(  42)		if ((value < 32768)) {
HXDLIN(  42)			return value;
            		}
            		else {
HXDLIN(  42)			return (value - 65536);
            		}
HXDLIN(  42)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readInt16BE,return )

int Buffer_Impl__obj::readUInt32LE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_46_readUInt32LE)
HXDLIN(  46)		return ((((( (int)(this1->bytes->b->__get(((offset + 3) + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset + 2) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readUInt32LE,return )

int Buffer_Impl__obj::readUInt32BE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_50_readUInt32BE)
HXDLIN(  50)		return ((((( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset + 2) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get(((offset + 3) + this1->byteOffset))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readUInt32BE,return )

int Buffer_Impl__obj::readInt32LE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_54_readInt32LE)
HXDLIN(  54)		return ((((( (int)(this1->bytes->b->__get(((offset + 3) + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset + 2) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readInt32LE,return )

int Buffer_Impl__obj::readInt32BE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_58_readInt32BE)
HXDLIN(  58)		return ((((( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset + 2) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get(((offset + 3) + this1->byteOffset))) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readInt32BE,return )

Float Buffer_Impl__obj::readUInt64LE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_61_readUInt64LE)
HXLINE(  62)		int left = ((((( (int)(this1->bytes->b->__get(((offset + 3) + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset + 2) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ));
HXLINE(  63)		int offset1 = (offset + 4);
HXDLIN(  63)		int right = ((((( (int)(this1->bytes->b->__get(((offset1 + 3) + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset1 + 2) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset1 + 1) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get((offset1 + this1->byteOffset))) ));
HXLINE(  65)		Float combined = (left + (::Math_obj::pow(( (Float)(2) ),( (Float)(32) )) * ( (Float)(right) )));
HXLINE(  66)		return combined;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readUInt64LE,return )

Float Buffer_Impl__obj::readUInt64BE( ::haxe::io::ArrayBufferViewImpl this1,::hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_69_readUInt64BE)
HXLINE(  70)		int left = ((((( (int)(this1->bytes->b->__get((offset + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset + 1) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset + 2) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get(((offset + 3) + this1->byteOffset))) ));
HXLINE(  71)		int offset1 = (offset + 4);
HXDLIN(  71)		int right = ((((( (int)(this1->bytes->b->__get((offset1 + this1->byteOffset))) ) << 24) | (( (int)(this1->bytes->b->__get(((offset1 + 1) + this1->byteOffset))) ) << 16)) | (( (int)(this1->bytes->b->__get(((offset1 + 2) + this1->byteOffset))) ) << 8)) | ( (int)(this1->bytes->b->__get(((offset1 + 3) + this1->byteOffset))) ));
HXLINE(  73)		Float combined = ((::Math_obj::pow(( (Float)(2) ),( (Float)(32) )) * ( (Float)(left) )) + right);
HXLINE(  74)		return combined;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Buffer_Impl__obj,readUInt64BE,return )

void Buffer_Impl__obj::writeUInt8( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_78_writeUInt8)
HXDLIN(  78)		bool _hx_tmp;
HXDLIN(  78)		if ((offset >= 0)) {
HXDLIN(  78)			_hx_tmp = (offset < this1->byteLength);
            		}
            		else {
HXDLIN(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXDLIN(  78)			this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeUInt8,(void))

void Buffer_Impl__obj::writeInt8( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_82_writeInt8)
HXDLIN(  82)		bool _hx_tmp;
HXDLIN(  82)		if ((offset >= 0)) {
HXDLIN(  82)			_hx_tmp = (offset < this1->byteLength);
            		}
            		else {
HXDLIN(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXDLIN(  82)			this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeInt8,(void))

void Buffer_Impl__obj::writeUInt16LE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_85_writeUInt16LE)
HXLINE(  86)		bool _hx_tmp;
HXDLIN(  86)		if ((offset >= 0)) {
HXLINE(  86)			_hx_tmp = (offset < this1->byteLength);
            		}
            		else {
HXLINE(  86)			_hx_tmp = false;
            		}
HXDLIN(  86)		if (_hx_tmp) {
HXLINE(  86)			this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value) );
            		}
HXLINE(  87)		{
HXLINE(  87)			int index = (offset + 1);
HXDLIN(  87)			int value1 = (value >> 8);
HXDLIN(  87)			bool _hx_tmp1;
HXDLIN(  87)			if ((index >= 0)) {
HXLINE(  87)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXLINE(  87)				_hx_tmp1 = false;
            			}
HXDLIN(  87)			if (_hx_tmp1) {
HXLINE(  87)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeUInt16LE,(void))

void Buffer_Impl__obj::writeUInt16BE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_90_writeUInt16BE)
HXLINE(  91)		{
HXLINE(  91)			int value1 = (value >> 8);
HXDLIN(  91)			bool _hx_tmp;
HXDLIN(  91)			if ((offset >= 0)) {
HXLINE(  91)				_hx_tmp = (offset < this1->byteLength);
            			}
            			else {
HXLINE(  91)				_hx_tmp = false;
            			}
HXDLIN(  91)			if (_hx_tmp) {
HXLINE(  91)				this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
HXLINE(  92)		{
HXLINE(  92)			int index = (offset + 1);
HXDLIN(  92)			bool _hx_tmp1;
HXDLIN(  92)			if ((index >= 0)) {
HXLINE(  92)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXLINE(  92)				_hx_tmp1 = false;
            			}
HXDLIN(  92)			if (_hx_tmp1) {
HXLINE(  92)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeUInt16BE,(void))

void Buffer_Impl__obj::writeInt16LE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_95_writeInt16LE)
HXLINE(  96)		bool _hx_tmp;
HXDLIN(  96)		if ((offset >= 0)) {
HXLINE(  96)			_hx_tmp = (offset < this1->byteLength);
            		}
            		else {
HXLINE(  96)			_hx_tmp = false;
            		}
HXDLIN(  96)		if (_hx_tmp) {
HXLINE(  96)			this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value) );
            		}
HXLINE(  97)		{
HXLINE(  97)			int index = (offset + 1);
HXDLIN(  97)			int value1 = (value >> 8);
HXDLIN(  97)			bool _hx_tmp1;
HXDLIN(  97)			if ((index >= 0)) {
HXLINE(  97)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXLINE(  97)				_hx_tmp1 = false;
            			}
HXDLIN(  97)			if (_hx_tmp1) {
HXLINE(  97)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeInt16LE,(void))

void Buffer_Impl__obj::writeInt16BE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_100_writeInt16BE)
HXLINE( 101)		{
HXLINE( 101)			int value1 = (value >> 8);
HXDLIN( 101)			bool _hx_tmp;
HXDLIN( 101)			if ((offset >= 0)) {
HXLINE( 101)				_hx_tmp = (offset < this1->byteLength);
            			}
            			else {
HXLINE( 101)				_hx_tmp = false;
            			}
HXDLIN( 101)			if (_hx_tmp) {
HXLINE( 101)				this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
HXLINE( 102)		{
HXLINE( 102)			int index = (offset + 1);
HXDLIN( 102)			bool _hx_tmp1;
HXDLIN( 102)			if ((index >= 0)) {
HXLINE( 102)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXLINE( 102)				_hx_tmp1 = false;
            			}
HXDLIN( 102)			if (_hx_tmp1) {
HXLINE( 102)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeInt16BE,(void))

void Buffer_Impl__obj::writeUInt32LE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_105_writeUInt32LE)
HXLINE( 106)		bool _hx_tmp;
HXDLIN( 106)		if ((offset >= 0)) {
HXLINE( 106)			_hx_tmp = (offset < this1->byteLength);
            		}
            		else {
HXLINE( 106)			_hx_tmp = false;
            		}
HXDLIN( 106)		if (_hx_tmp) {
HXLINE( 106)			this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value) );
            		}
HXLINE( 107)		{
HXLINE( 107)			int index = (offset + 1);
HXDLIN( 107)			int value1 = (value >> 8);
HXDLIN( 107)			bool _hx_tmp1;
HXDLIN( 107)			if ((index >= 0)) {
HXLINE( 107)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXLINE( 107)				_hx_tmp1 = false;
            			}
HXDLIN( 107)			if (_hx_tmp1) {
HXLINE( 107)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
HXLINE( 108)		{
HXLINE( 108)			int index1 = (offset + 2);
HXDLIN( 108)			int value2 = (value >> 16);
HXDLIN( 108)			bool _hx_tmp2;
HXDLIN( 108)			if ((index1 >= 0)) {
HXLINE( 108)				_hx_tmp2 = (index1 < this1->byteLength);
            			}
            			else {
HXLINE( 108)				_hx_tmp2 = false;
            			}
HXDLIN( 108)			if (_hx_tmp2) {
HXLINE( 108)				this1->bytes->b[(index1 + this1->byteOffset)] = ( (unsigned char)(value2) );
            			}
            		}
HXLINE( 109)		{
HXLINE( 109)			int index2 = (offset + 3);
HXDLIN( 109)			int value3 = (value >> 24);
HXDLIN( 109)			bool _hx_tmp3;
HXDLIN( 109)			if ((index2 >= 0)) {
HXLINE( 109)				_hx_tmp3 = (index2 < this1->byteLength);
            			}
            			else {
HXLINE( 109)				_hx_tmp3 = false;
            			}
HXDLIN( 109)			if (_hx_tmp3) {
HXLINE( 109)				this1->bytes->b[(index2 + this1->byteOffset)] = ( (unsigned char)(value3) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeUInt32LE,(void))

void Buffer_Impl__obj::writeUInt32BE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_112_writeUInt32BE)
HXLINE( 113)		{
HXLINE( 113)			int value1 = (value >> 24);
HXDLIN( 113)			bool _hx_tmp;
HXDLIN( 113)			if ((offset >= 0)) {
HXLINE( 113)				_hx_tmp = (offset < this1->byteLength);
            			}
            			else {
HXLINE( 113)				_hx_tmp = false;
            			}
HXDLIN( 113)			if (_hx_tmp) {
HXLINE( 113)				this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
HXLINE( 114)		{
HXLINE( 114)			int index = (offset + 1);
HXDLIN( 114)			int value2 = (value >> 16);
HXDLIN( 114)			bool _hx_tmp1;
HXDLIN( 114)			if ((index >= 0)) {
HXLINE( 114)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXLINE( 114)				_hx_tmp1 = false;
            			}
HXDLIN( 114)			if (_hx_tmp1) {
HXLINE( 114)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value2) );
            			}
            		}
HXLINE( 115)		{
HXLINE( 115)			int index1 = (offset + 2);
HXDLIN( 115)			int value3 = (value >> 8);
HXDLIN( 115)			bool _hx_tmp2;
HXDLIN( 115)			if ((index1 >= 0)) {
HXLINE( 115)				_hx_tmp2 = (index1 < this1->byteLength);
            			}
            			else {
HXLINE( 115)				_hx_tmp2 = false;
            			}
HXDLIN( 115)			if (_hx_tmp2) {
HXLINE( 115)				this1->bytes->b[(index1 + this1->byteOffset)] = ( (unsigned char)(value3) );
            			}
            		}
HXLINE( 116)		{
HXLINE( 116)			int index2 = (offset + 3);
HXDLIN( 116)			bool _hx_tmp3;
HXDLIN( 116)			if ((index2 >= 0)) {
HXLINE( 116)				_hx_tmp3 = (index2 < this1->byteLength);
            			}
            			else {
HXLINE( 116)				_hx_tmp3 = false;
            			}
HXDLIN( 116)			if (_hx_tmp3) {
HXLINE( 116)				this1->bytes->b[(index2 + this1->byteOffset)] = ( (unsigned char)(value) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeUInt32BE,(void))

void Buffer_Impl__obj::writeInt32LE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_120_writeInt32LE)
HXDLIN( 120)		bool _hx_tmp;
HXDLIN( 120)		if ((offset >= 0)) {
HXDLIN( 120)			_hx_tmp = (offset < this1->byteLength);
            		}
            		else {
HXDLIN( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXDLIN( 120)			this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value) );
            		}
HXDLIN( 120)		{
HXDLIN( 120)			int index = (offset + 1);
HXDLIN( 120)			int value1 = (value >> 8);
HXDLIN( 120)			bool _hx_tmp1;
HXDLIN( 120)			if ((index >= 0)) {
HXDLIN( 120)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXDLIN( 120)				_hx_tmp1 = false;
            			}
HXDLIN( 120)			if (_hx_tmp1) {
HXDLIN( 120)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
HXDLIN( 120)		{
HXDLIN( 120)			int index1 = (offset + 2);
HXDLIN( 120)			int value2 = (value >> 16);
HXDLIN( 120)			bool _hx_tmp2;
HXDLIN( 120)			if ((index1 >= 0)) {
HXDLIN( 120)				_hx_tmp2 = (index1 < this1->byteLength);
            			}
            			else {
HXDLIN( 120)				_hx_tmp2 = false;
            			}
HXDLIN( 120)			if (_hx_tmp2) {
HXDLIN( 120)				this1->bytes->b[(index1 + this1->byteOffset)] = ( (unsigned char)(value2) );
            			}
            		}
HXDLIN( 120)		{
HXDLIN( 120)			int index2 = (offset + 3);
HXDLIN( 120)			int value3 = (value >> 24);
HXDLIN( 120)			bool _hx_tmp3;
HXDLIN( 120)			if ((index2 >= 0)) {
HXDLIN( 120)				_hx_tmp3 = (index2 < this1->byteLength);
            			}
            			else {
HXDLIN( 120)				_hx_tmp3 = false;
            			}
HXDLIN( 120)			if (_hx_tmp3) {
HXDLIN( 120)				this1->bytes->b[(index2 + this1->byteOffset)] = ( (unsigned char)(value3) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeInt32LE,(void))

void Buffer_Impl__obj::writeInt32BE( ::haxe::io::ArrayBufferViewImpl this1,int offset,int value){
            	HX_STACKFRAME(&_hx_pos_2c17d17683ccc32a_124_writeInt32BE)
HXDLIN( 124)		{
HXDLIN( 124)			int value1 = (value >> 24);
HXDLIN( 124)			bool _hx_tmp;
HXDLIN( 124)			if ((offset >= 0)) {
HXDLIN( 124)				_hx_tmp = (offset < this1->byteLength);
            			}
            			else {
HXDLIN( 124)				_hx_tmp = false;
            			}
HXDLIN( 124)			if (_hx_tmp) {
HXDLIN( 124)				this1->bytes->b[(offset + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
HXDLIN( 124)		{
HXDLIN( 124)			int index = (offset + 1);
HXDLIN( 124)			int value2 = (value >> 16);
HXDLIN( 124)			bool _hx_tmp1;
HXDLIN( 124)			if ((index >= 0)) {
HXDLIN( 124)				_hx_tmp1 = (index < this1->byteLength);
            			}
            			else {
HXDLIN( 124)				_hx_tmp1 = false;
            			}
HXDLIN( 124)			if (_hx_tmp1) {
HXDLIN( 124)				this1->bytes->b[(index + this1->byteOffset)] = ( (unsigned char)(value2) );
            			}
            		}
HXDLIN( 124)		{
HXDLIN( 124)			int index1 = (offset + 2);
HXDLIN( 124)			int value3 = (value >> 8);
HXDLIN( 124)			bool _hx_tmp2;
HXDLIN( 124)			if ((index1 >= 0)) {
HXDLIN( 124)				_hx_tmp2 = (index1 < this1->byteLength);
            			}
            			else {
HXDLIN( 124)				_hx_tmp2 = false;
            			}
HXDLIN( 124)			if (_hx_tmp2) {
HXDLIN( 124)				this1->bytes->b[(index1 + this1->byteOffset)] = ( (unsigned char)(value3) );
            			}
            		}
HXDLIN( 124)		{
HXDLIN( 124)			int index2 = (offset + 3);
HXDLIN( 124)			bool _hx_tmp3;
HXDLIN( 124)			if ((index2 >= 0)) {
HXDLIN( 124)				_hx_tmp3 = (index2 < this1->byteLength);
            			}
            			else {
HXDLIN( 124)				_hx_tmp3 = false;
            			}
HXDLIN( 124)			if (_hx_tmp3) {
HXDLIN( 124)				this1->bytes->b[(index2 + this1->byteOffset)] = ( (unsigned char)(value) );
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Buffer_Impl__obj,writeInt32BE,(void))


Buffer_Impl__obj::Buffer_Impl__obj()
{
}

bool Buffer_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { outValue = alloc_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readInt8") ) { outValue = readInt8_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readUInt8") ) { outValue = readUInt8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeInt8") ) { outValue = writeInt8_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeUInt8") ) { outValue = writeUInt8_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"complement8") ) { outValue = complement8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readInt16LE") ) { outValue = readInt16LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readInt16BE") ) { outValue = readInt16BE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readInt32LE") ) { outValue = readInt32LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readInt32BE") ) { outValue = readInt32BE_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"complement16") ) { outValue = complement16_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readUInt16LE") ) { outValue = readUInt16LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readUInt16BE") ) { outValue = readUInt16BE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readUInt32LE") ) { outValue = readUInt32LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readUInt32BE") ) { outValue = readUInt32BE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readUInt64LE") ) { outValue = readUInt64LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readUInt64BE") ) { outValue = readUInt64BE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeInt16LE") ) { outValue = writeInt16LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeInt16BE") ) { outValue = writeInt16BE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeInt32LE") ) { outValue = writeInt32LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeInt32BE") ) { outValue = writeInt32BE_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"writeUInt16LE") ) { outValue = writeUInt16LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeUInt16BE") ) { outValue = writeUInt16BE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeUInt32LE") ) { outValue = writeUInt32LE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeUInt32BE") ) { outValue = writeUInt32BE_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Buffer_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Buffer_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Buffer_Impl__obj::__mClass;

static ::String Buffer_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("alloc",75,a4,93,21),
	HX_("readUInt8",48,9c,5d,5f),
	HX_("readInt8",df,1e,b3,6d),
	HX_("complement8",92,46,06,00),
	HX_("complement16",4b,73,77,05),
	HX_("readUInt16LE",8e,fe,2b,21),
	HX_("readUInt16BE",d8,f5,2b,21),
	HX_("readInt16LE",57,f4,82,47),
	HX_("readInt16BE",a1,eb,82,47),
	HX_("readUInt32LE",c8,62,7b,22),
	HX_("readUInt32BE",12,5a,7b,22),
	HX_("readInt32LE",91,58,d2,48),
	HX_("readInt32BE",db,4f,d2,48),
	HX_("readUInt64LE",27,8b,78,24),
	HX_("readUInt64BE",71,82,78,24),
	HX_("writeUInt8",1f,4a,38,23),
	HX_("writeInt8",e8,38,6f,4e),
	HX_("writeUInt16LE",17,51,98,a9),
	HX_("writeUInt16BE",61,48,98,a9),
	HX_("writeInt16LE",ee,05,c6,b9),
	HX_("writeInt16BE",38,fd,c5,b9),
	HX_("writeUInt32LE",51,b5,e7,aa),
	HX_("writeUInt32BE",9b,ac,e7,aa),
	HX_("writeInt32LE",28,6a,15,bb),
	HX_("writeInt32BE",72,61,15,bb),
	::String(null())
};

void Buffer_Impl__obj::__register()
{
	Buffer_Impl__obj _hx_dummy;
	Buffer_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.node._Buffer.Buffer_Impl_",73,94,c0,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Buffer_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Buffer_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Buffer_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Buffer_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Buffer_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace node
} // end namespace _Buffer
