// Generated by Haxe 4.2.0-rc.1+d0fd88b9b
#include <hxcpp.h>

#ifndef INCLUDED_0f1da2a7ba9c7167
#define INCLUDED_0f1da2a7ba9c7167
#include "linc_uv.h"
#endif
#ifndef INCLUDED_uv__SockAddrIn_SockAddrIn_Impl_
#include <uv/_SockAddrIn/SockAddrIn_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fea69674f31eaae1_18_getAddress,"uv._SockAddrIn.SockAddrIn_Impl_","getAddress",0xa59defb0,"uv._SockAddrIn.SockAddrIn_Impl_.getAddress","uv/SockAddrIn.hx",18,0xd2886096)
namespace uv{
namespace _SockAddrIn{

void SockAddrIn_Impl__obj::__construct() { }

Dynamic SockAddrIn_Impl__obj::__CreateEmpty() { return new SockAddrIn_Impl__obj; }

void *SockAddrIn_Impl__obj::_hx_vtable = 0;

Dynamic SockAddrIn_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SockAddrIn_Impl__obj > _hx_result = new SockAddrIn_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SockAddrIn_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x33ce498e;
}

 ::Dynamic SockAddrIn_Impl__obj::getAddress(::cpp::Pointer<  sockaddr_in > this1){
            	HX_STACKFRAME(&_hx_pos_fea69674f31eaae1_18_getAddress)
HXLINE(  21)		char addr[17] = {'\0'};
HXLINE(  22)		 sockaddr_in* _hx_tmp = this1->get_raw();
HXDLIN(  22)		uv_ip4_name(_hx_tmp,addr,( (size_t)(16) ));
HXLINE(  24)		::String _hx_tmp1 = ::String(addr);
HXLINE(  23)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("host",68,cf,12,45),_hx_tmp1)
            			->setFixed(1,HX_("port",81,83,5c,4a),ntohs(this1->get_value().sin_port)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SockAddrIn_Impl__obj,getAddress,return )


SockAddrIn_Impl__obj::SockAddrIn_Impl__obj()
{
}

bool SockAddrIn_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"getAddress") ) { outValue = getAddress_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SockAddrIn_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SockAddrIn_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class SockAddrIn_Impl__obj::__mClass;

static ::String SockAddrIn_Impl__obj_sStaticFields[] = {
	HX_("getAddress",be,f7,6c,ec),
	::String(null())
};

void SockAddrIn_Impl__obj::__register()
{
	SockAddrIn_Impl__obj _hx_dummy;
	SockAddrIn_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("uv._SockAddrIn.SockAddrIn_Impl_",3c,5f,92,26);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SockAddrIn_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SockAddrIn_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< SockAddrIn_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SockAddrIn_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SockAddrIn_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace uv
} // end namespace _SockAddrIn
