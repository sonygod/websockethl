// Generated by Haxe 4.2.0-rc.1+d0fd88b9b
#include <hxcpp.h>

#ifndef INCLUDED_0f1da2a7ba9c7167
#define INCLUDED_0f1da2a7ba9c7167
#include "linc_uv.h"
#endif
#ifndef INCLUDED_2710e462964f946c
#define INCLUDED_2710e462964f946c
#include "stdlib.h"
#endif
#ifndef INCLUDED_Foo
#include <Foo.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_uv__SockAddrIn_SockAddrIn_Impl_
#include <uv/_SockAddrIn/SockAddrIn_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_18_foo,"Foo","foo",0xc8ab817e,"Foo.foo","Test.hx",18,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_49_onConnection,"Foo","onConnection",0xcf5978a5,"Foo.onConnection","Test.hx",49,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_66_onAlloc,"Foo","onAlloc",0x12a9994e,"Foo.onAlloc","Test.hx",66,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_73_onRead,"Foo","onRead",0x3ef5749d,"Foo.onRead","Test.hx",73,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_94_onWrite,"Foo","onWrite",0xc16f61b8,"Foo.onWrite","Test.hx",94,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_101_onConnect,"Foo","onConnect",0xef9fd903,"Foo.onConnect","Test.hx",101,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_108_onResolve,"Foo","onResolve",0x417fb005,"Foo.onResolve","Test.hx",108,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_124_signal,"Foo","signal",0x054a4ef0,"Foo.signal","Test.hx",124,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_d93a52f3339c65bd_135_onStart,"Foo","onStart",0x7521693b,"Foo.onStart","Test.hx",135,0x8afb218c)

void Foo_obj::__construct() { }

Dynamic Foo_obj::__CreateEmpty() { return new Foo_obj; }

void *Foo_obj::_hx_vtable = 0;

Dynamic Foo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Foo_obj > _hx_result = new Foo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Foo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ed9c37a;
}

void Foo_obj::foo(){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_18_foo)
HXLINE(  19)		::cpp::Pointer<  uv_loop_t > loop = ( (::cpp::Pointer<  uv_loop_t >)(::cpp::Pointer_obj::fromRaw(uv_default_loop())) );
HXLINE(  21)		::cpp::Pointer<  sockaddr_in > this1 = ( (::cpp::Pointer<  sockaddr_in >)(malloc(::hx::ClassSizeOf< ::sockaddr_in  >())) );
HXDLIN(  21)		::cpp::Pointer<  sockaddr_in > addr = this1;
HXLINE(  22)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  22)		int _hx_tmp1 = uv_ip4_addr(HX_("0.0.0.0",76,1a,39,f2),7000,addr->get_raw());
HXDLIN(  22)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),22,HX_("Foo",e6,7e,35,00),HX_("foo",06,c7,4d,00)));
HXLINE(  23)		::cpp::Pointer<  uv_tcp_t > this2 = ( (::cpp::Pointer<  uv_tcp_t >)(malloc(::hx::ClassSizeOf< ::uv_tcp_t  >())) );
HXDLIN(  23)		::cpp::Pointer<  uv_tcp_t > server = this2;
HXLINE(  24)		{
HXLINE(  24)			 uv_loop_t* loop1 = loop->get_raw();
HXDLIN(  24)			uv_tcp_init(loop1,server->get_raw());
            		}
HXLINE(  25)		{
HXLINE(  25)			const  sockaddr* addr1 = ( (const  sockaddr*)(( (::cpp::Pointer<  sockaddr >)(addr->reinterpret()) )->get_raw()) );
HXDLIN(  25)			uv_tcp_bind(server->get_raw(),addr1,0);
            		}
HXLINE(  26)		if (::hx::IsNotNull( addr )) {
HXLINE(  26)			free(( (void*)(addr->ptr) ));
HXDLIN(  26)			addr->ptr = null();
            		}
HXLINE(  28)		{
HXLINE(  28)			::cpp::Pointer<  uv_stream_t > this3 = ( (::cpp::Pointer<  uv_stream_t >)(server->reinterpret()) );
HXDLIN(  28)			::cpp::Function< void  ( uv_stream_t*,int) > cb = ::cpp::Function< void ( uv_stream_t*,int)>(::hx::AnyCast(&::Foo_obj::onConnection ));
HXDLIN(  28)			uv_listen(this3->get_raw(),128,cb);
            		}
HXLINE(  30)		::cpp::Pointer<  uv_tcp_t > this4 = ( (::cpp::Pointer<  uv_tcp_t >)(malloc(::hx::ClassSizeOf< ::uv_tcp_t  >())) );
HXDLIN(  30)		::cpp::Pointer<  uv_tcp_t > client = this4;
HXLINE(  31)		{
HXLINE(  31)			 uv_loop_t* loop2 = loop->get_raw();
HXDLIN(  31)			uv_tcp_init(loop2,client->get_raw());
            		}
HXLINE(  32)		::cpp::Pointer<  uv_connect_t > this5 = ( (::cpp::Pointer<  uv_connect_t >)(malloc(::hx::ClassSizeOf< ::uv_connect_t  >())) );
HXDLIN(  32)		::cpp::Pointer<  uv_connect_t > connect = this5;
HXLINE(  33)		::cpp::Pointer<  sockaddr_in > this6 = ( (::cpp::Pointer<  sockaddr_in >)(malloc(::hx::ClassSizeOf< ::sockaddr_in  >())) );
HXDLIN(  33)		::cpp::Pointer<  sockaddr_in > dest = this6;
HXLINE(  34)		uv_ip4_addr(HX_("127.0.0.1",fd,bc,5e,a1),7000,dest->get_raw());
HXLINE(  35)		{
HXLINE(  35)			 uv_connect_t* req = connect->get_raw();
HXDLIN(  35)			const  sockaddr* dest1 = ( (const  sockaddr*)(( (::cpp::Pointer<  sockaddr >)(dest->reinterpret()) )->get_raw()) );
HXDLIN(  35)			::cpp::Function< void  ( uv_connect_t*,int) > cb1 = ::cpp::Function< void ( uv_connect_t*,int)>(::hx::AnyCast(&::Foo_obj::onConnect ));
HXDLIN(  35)			uv_tcp_connect(req,client->get_raw(),dest1,cb1);
            		}
HXLINE(  38)		::cpp::Pointer<  addrinfo > this7 = ( (::cpp::Pointer<  addrinfo >)(malloc(::hx::ClassSizeOf< ::addrinfo  >())) );
HXDLIN(  38)		this7->get_value().ai_family = PF_INET;this7->get_value().ai_socktype = SOCK_STREAM;this7->get_value().ai_protocol = IPPROTO_TCP;this7->get_value().ai_flags = 0;;
HXDLIN(  38)		::cpp::Pointer<  addrinfo > hint = this7;
HXLINE(  39)		::cpp::Pointer<  uv_getaddrinfo_t > this8 = ( (::cpp::Pointer<  uv_getaddrinfo_t >)(malloc(::hx::ClassSizeOf< ::uv_getaddrinfo_t  >())) );
HXDLIN(  39)		::cpp::Pointer<  uv_getaddrinfo_t > resolver = this8;
HXLINE(  40)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  40)		 uv_loop_t* loop3 = loop->get_raw();
HXDLIN(  40)		::cpp::Function< void  ( uv_getaddrinfo_t*,int, addrinfo*) > cb2 = ::cpp::Function< void ( uv_getaddrinfo_t*,int, addrinfo*)>(::hx::AnyCast(&::Foo_obj::onResolve ));
HXDLIN(  40)		const char* this9 = HX_("example.com",fd,b5,b6,e8).utf8_str();
HXDLIN(  40)		const char* this10 = HX_("80",f8,30,00,00).utf8_str();
HXDLIN(  40)		const  addrinfo* hints = ( (const  addrinfo*)(hint->get_raw()) );
HXDLIN(  40)		int _hx_tmp3 = uv_getaddrinfo(loop3,resolver->get_raw(),cb2,this9,this10,hints);
HXDLIN(  40)		_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),40,HX_("Foo",e6,7e,35,00),HX_("foo",06,c7,4d,00)));
HXLINE(  43)		::Foo_obj::signal(loop->get_raw());
HXLINE(  45)		{
HXLINE(  45)			uv_run_mode mode = UV_RUN_DEFAULT;
HXDLIN(  45)			uv_run(loop->get_raw(),mode);
            		}
HXLINE(  46)		::haxe::Log_obj::trace(HX_("quit",cf,3f,0a,4b),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),46,HX_("Foo",e6,7e,35,00),HX_("foo",06,c7,4d,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Foo_obj,foo,(void))

void Foo_obj::onConnection( uv_stream_t* stream,int status){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_49_onConnection)
HXLINE(  50)		::haxe::Log_obj::trace(HX_("server on connected",05,24,71,65),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),50,HX_("Foo",e6,7e,35,00),HX_("onConnection",1d,42,56,cd)));
HXLINE(  51)		::cpp::Pointer<  uv_tcp_t > server = ( (::cpp::Pointer<  uv_tcp_t >)(::cpp::Pointer_obj::fromRaw(stream)->reinterpret()) );
HXLINE(  52)		::cpp::Pointer<  uv_tcp_t > this1 = ( (::cpp::Pointer<  uv_tcp_t >)(malloc(::hx::ClassSizeOf< ::uv_tcp_t  >())) );
HXDLIN(  52)		::cpp::Pointer<  uv_tcp_t > client = this1;
HXLINE(  53)		{
HXLINE(  53)			::cpp::Pointer<  uv_loop_t > this2 = ( (::cpp::Pointer<  uv_loop_t >)(::cpp::Pointer_obj::fromRaw(uv_default_loop())) );
HXDLIN(  53)			 uv_loop_t* loop = this2->get_raw();
HXDLIN(  53)			uv_tcp_init(loop,client->get_raw());
            		}
HXLINE(  54)		::cpp::Pointer<  uv_stream_t > this3 = ( (::cpp::Pointer<  uv_stream_t >)(server->reinterpret()) );
HXDLIN(  54)		::cpp::Pointer<  uv_stream_t > this4 = ( (::cpp::Pointer<  uv_stream_t >)(client->reinterpret()) );
HXDLIN(  54)		 uv_stream_t* client1 = this4->get_raw();
HXDLIN(  54)		if ((uv_accept(this3->get_raw(),client1) == 0)) {
HXLINE(  55)			::haxe::Log_obj::trace(HX_("accepted",67,bd,17,c8),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),55,HX_("Foo",e6,7e,35,00),HX_("onConnection",1d,42,56,cd)));
HXLINE(  56)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  56)			::cpp::Pointer<  sockaddr_storage > this1 = ( (::cpp::Pointer<  sockaddr_storage >)(malloc(::hx::ClassSizeOf< ::sockaddr_storage  >())) );
HXDLIN(  56)			::cpp::Pointer<  sockaddr_storage > name = this1;
HXDLIN(  56)			int namelen = ::hx::ClassSizeOf< ::sockaddr_storage  >();
HXDLIN(  56)			 uv_tcp_t* _hx_tmp1 = client->get_raw();
HXDLIN(  56)			 sockaddr* _hx_tmp2 = ( (::cpp::Pointer<  sockaddr >)(name->reinterpret()) )->get_raw();
HXDLIN(  56)			uv_tcp_getpeername(_hx_tmp1,_hx_tmp2,( (int*)( (::cpp::Pointer_obj::addressOf(namelen)).get_raw()) ));
HXDLIN(  56)			::cpp::Pointer<  sockaddr_in > tmp = ( (::cpp::Pointer<  sockaddr_in >)(::cpp::Pointer_obj::fromRaw(( (::cpp::Pointer<  sockaddr_in >)(name->reinterpret()) )->get_raw())) );
HXDLIN(  56)			 ::Dynamic ret = ::uv::_SockAddrIn::SockAddrIn_Impl__obj::getAddress(tmp);
HXDLIN(  56)			if (::hx::IsNotNull( name )) {
HXLINE(  56)				free(( (void*)(name->ptr) ));
HXDLIN(  56)				name->ptr = null();
            			}
HXDLIN(  56)			_hx_tmp(ret,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),56,HX_("Foo",e6,7e,35,00),HX_("onConnection",1d,42,56,cd)));
HXLINE(  57)			 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN(  57)			::cpp::Pointer<  sockaddr_storage > this2 = ( (::cpp::Pointer<  sockaddr_storage >)(malloc(::hx::ClassSizeOf< ::sockaddr_storage  >())) );
HXDLIN(  57)			::cpp::Pointer<  sockaddr_storage > name1 = this2;
HXDLIN(  57)			int namelen1 = ::hx::ClassSizeOf< ::sockaddr_storage  >();
HXDLIN(  57)			 uv_tcp_t* _hx_tmp4 = client->get_raw();
HXDLIN(  57)			 sockaddr* _hx_tmp5 = ( (::cpp::Pointer<  sockaddr >)(name1->reinterpret()) )->get_raw();
HXDLIN(  57)			uv_tcp_getsockname(_hx_tmp4,_hx_tmp5,( (int*)( (::cpp::Pointer_obj::addressOf(namelen1)).get_raw()) ));
HXDLIN(  57)			::cpp::Pointer<  sockaddr_in > tmp1 = ( (::cpp::Pointer<  sockaddr_in >)(::cpp::Pointer_obj::fromRaw(( (::cpp::Pointer<  sockaddr_in >)(name1->reinterpret()) )->get_raw())) );
HXDLIN(  57)			 ::Dynamic ret1 = ::uv::_SockAddrIn::SockAddrIn_Impl__obj::getAddress(tmp1);
HXDLIN(  57)			if (::hx::IsNotNull( name1 )) {
HXLINE(  57)				free(( (void*)(name1->ptr) ));
HXDLIN(  57)				name1->ptr = null();
            			}
HXDLIN(  57)			_hx_tmp3(ret1,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),57,HX_("Foo",e6,7e,35,00),HX_("onConnection",1d,42,56,cd)));
HXLINE(  58)			 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN(  58)			::cpp::Pointer<  uv_stream_t > this3 = ( (::cpp::Pointer<  uv_stream_t >)(client->reinterpret()) );
HXDLIN(  58)			int _hx_tmp7 = uv_read_stop(this3->get_raw());
HXDLIN(  58)			_hx_tmp6(_hx_tmp7,::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),58,HX_("Foo",e6,7e,35,00),HX_("onConnection",1d,42,56,cd)));
HXLINE(  59)			{
HXLINE(  59)				::cpp::Pointer<  uv_stream_t > this4 = ( (::cpp::Pointer<  uv_stream_t >)(client->reinterpret()) );
HXDLIN(  59)				::cpp::Function< void  ( uv_handle_t*,size_t, uv_buf_t*) > alloc_cb = ::cpp::Function< void ( uv_handle_t*,size_t, uv_buf_t*)>(::hx::AnyCast(&::Foo_obj::onAlloc ));
HXDLIN(  59)				::cpp::Function< void  ( uv_stream_t*,ssize_t,const  uv_buf_t*) > read_cb = ::cpp::Function< void ( uv_stream_t*,ssize_t,const  uv_buf_t*)>(::hx::AnyCast(&::Foo_obj::onRead ));
HXDLIN(  59)				uv_read_start(this4->get_raw(),alloc_cb,read_cb);
            			}
            		}
            		else {
HXLINE(  61)			::haxe::Log_obj::trace(HX_("here is close",32,35,f7,1c),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),61,HX_("Foo",e6,7e,35,00),HX_("onConnection",1d,42,56,cd)));
HXLINE(  62)			{
HXLINE(  62)				::cpp::Pointer<  uv_handle_t > this1 = ( (::cpp::Pointer<  uv_handle_t >)(client->reinterpret()) );
HXDLIN(  62)				::cpp::Function< void  ( uv_handle_t*) > cb = null();
HXDLIN(  62)				uv_close(this1->get_raw(),cb);
            			}
            		}
            	}


void Foo_obj::onAlloc( uv_handle_t* handle,size_t suggestedSize, uv_buf_t* buf){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_66_onAlloc)
HXLINE(  67)		int suggestedSize1 = ( (int)(suggestedSize) );
HXLINE(  68)		::cpp::Pointer< char > base = ( (::cpp::Pointer< char >)(malloc(suggestedSize1)) );
HXLINE(  69)		buf[0].base = ( (char*)( (base).get_raw()) );
HXLINE(  70)		buf[0].len = suggestedSize1;
            	}


void Foo_obj::onRead( uv_stream_t* handle,ssize_t nread,const  uv_buf_t* buf){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_73_onRead)
HXLINE(  74)		::cpp::Pointer<  uv_tcp_t > client = ( (::cpp::Pointer<  uv_tcp_t >)(::cpp::Pointer_obj::fromRaw(handle)->reinterpret()) );
HXLINE(  75)		int nread1 = ( (int)(nread) );
HXLINE(  76)		if ((nread1 > 0)) {
HXLINE(  77)			::cpp::Pointer<  uv_write_t > this1 = ( (::cpp::Pointer<  uv_write_t >)(malloc(::hx::ClassSizeOf< ::uv_write_t  >())) );
HXDLIN(  77)			::cpp::Pointer<  uv_write_t > req = this1;
HXLINE(  78)			::cpp::Pointer<  uv_buf_t > this2 = ( (::cpp::Pointer<  uv_buf_t >)(malloc(::hx::ClassSizeOf< ::uv_buf_t  >())) );
HXDLIN(  78)			::cpp::Pointer<  uv_buf_t > writeBuf = this2;
HXLINE(  79)			{
HXLINE(  79)				writeBuf->get_value().base = (char*)malloc(nread1);
HXDLIN(  79)				writeBuf->get_value().len = nread1;
            			}
HXLINE(  80)			{
HXLINE(  80)				void* v = ( (void*)(writeBuf->get_raw()) );
HXDLIN(  80)				req->get_value().data = v;
            			}
HXLINE(  82)			 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::ofString(HX_("hello,libuv",cc,7d,58,6b),null());
HXLINE(  83)			{
HXLINE(  83)				int size = b->length;
HXDLIN(  83)				::cpp::Pointer< unsigned char > raw = ( (::cpp::Pointer< unsigned char >)(::cpp::Pointer_obj::arrayElem(b->b,0)) );
HXDLIN(  83)				const unsigned char* raw1 = raw->get_constRaw();
HXDLIN(  83)				{
HXLINE(  83)					char* src = (char*)raw1;
HXDLIN(  83)					memcpy(( (void*)(writeBuf->get_value().base) ),( (const void*)(src) ),size);
            				}
            			}
HXLINE(  85)			{
HXLINE(  85)				::cpp::Pointer<  uv_stream_t > this3 = ( (::cpp::Pointer<  uv_stream_t >)(client->reinterpret()) );
HXDLIN(  85)				 uv_write_t* req1 = req->get_raw();
HXDLIN(  85)				const  uv_buf_t* bufs = ( (const  uv_buf_t*)(writeBuf->get_raw()) );
HXDLIN(  85)				::cpp::Function< void  ( uv_write_t*,int) > cb = ::cpp::Function< void ( uv_write_t*,int)>(::hx::AnyCast(&::Foo_obj::onWrite ));
HXDLIN(  85)				uv_write(req1,this3->get_raw(),bufs,( (unsigned int)(1) ),cb);
            			}
            		}
HXLINE(  87)		if ((nread1 < 0)) {
HXLINE(  88)			if ((nread1 != UV_EOF)) {
HXLINE(  88)				::haxe::Log_obj::trace((HX_("read error ",e2,c6,b1,09) + nread1),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),88,HX_("Foo",e6,7e,35,00),HX_("onRead",15,54,31,ee)));
            			}
HXLINE(  89)			{
HXLINE(  89)				::cpp::Pointer<  uv_handle_t > this1 = ( (::cpp::Pointer<  uv_handle_t >)(client->reinterpret()) );
HXDLIN(  89)				::cpp::Function< void  ( uv_handle_t*) > cb = null();
HXDLIN(  89)				uv_close(this1->get_raw(),cb);
            			}
            		}
HXLINE(  91)		free(( (void*)(buf[0].base) ));
            	}


void Foo_obj::onWrite( uv_write_t* handle,int status){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_94_onWrite)
HXLINE(  95)		::cpp::Pointer<  uv_write_t > write = ( (::cpp::Pointer<  uv_write_t >)(::cpp::Pointer_obj::fromRaw(handle)) );
HXLINE(  96)		::cpp::Pointer<  uv_buf_t > buf = ::cpp::Pointer_obj::fromRaw(( (void*)(write->get_value().data) ))->reinterpret();
HXLINE(  97)		{
HXLINE(  97)			free(( (void*)(buf->get_value().base) ));
HXDLIN(  97)			if (::hx::IsNotNull( buf )) {
HXLINE(  97)				free(( (void*)(buf->ptr) ));
HXDLIN(  97)				buf->ptr = null();
            			}
            		}
HXLINE(  98)		if (::hx::IsNotNull( write )) {
HXLINE(  98)			free(( (void*)(write->ptr) ));
HXDLIN(  98)			write->ptr = null();
            		}
            	}


void Foo_obj::onConnect( uv_connect_t* req,int status){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_101_onConnect)
HXLINE( 102)		::cpp::Pointer<  uv_connect_t > this1 = ( (::cpp::Pointer<  uv_connect_t >)(::cpp::Pointer_obj::fromRaw(req)) );
HXDLIN( 102)		::cpp::Pointer<  uv_tcp_t > this2 = ( (::cpp::Pointer<  uv_tcp_t >)(::cpp::Pointer_obj::fromRaw(( (::cpp::Pointer<  uv_stream_t >)(::cpp::Pointer_obj::fromRaw(this1->get_value().handle)) )->get_raw())->reinterpret()) );
HXDLIN( 102)		::cpp::Pointer<  sockaddr_storage > this3 = ( (::cpp::Pointer<  sockaddr_storage >)(malloc(::hx::ClassSizeOf< ::sockaddr_storage  >())) );
HXDLIN( 102)		::cpp::Pointer<  sockaddr_storage > name = this3;
HXDLIN( 102)		int namelen = ::hx::ClassSizeOf< ::sockaddr_storage  >();
HXDLIN( 102)		 uv_tcp_t* _hx_tmp = this2->get_raw();
HXDLIN( 102)		 sockaddr* _hx_tmp1 = ( (::cpp::Pointer<  sockaddr >)(name->reinterpret()) )->get_raw();
HXDLIN( 102)		uv_tcp_getpeername(_hx_tmp,_hx_tmp1,( (int*)( (::cpp::Pointer_obj::addressOf(namelen)).get_raw()) ));
HXDLIN( 102)		::cpp::Pointer<  sockaddr_in > tmp = ( (::cpp::Pointer<  sockaddr_in >)(::cpp::Pointer_obj::fromRaw(( (::cpp::Pointer<  sockaddr_in >)(name->reinterpret()) )->get_raw())) );
HXDLIN( 102)		 ::Dynamic ret = ::uv::_SockAddrIn::SockAddrIn_Impl__obj::getAddress(tmp);
HXDLIN( 102)		if (::hx::IsNotNull( name )) {
HXLINE( 102)			free(( (void*)(name->ptr) ));
HXDLIN( 102)			name->ptr = null();
            		}
HXDLIN( 102)		 ::Dynamic addr = ret;
HXLINE( 103)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 103)		::String _hx_tmp3 = ((((HX_("onconnect client ",00,6b,96,89) + status) + HX_(" ",20,00,00,00)) + ( (::String)(addr->__Field(HX_("host",68,cf,12,45),::hx::paccDynamic)) ).toString()) + HX_(" ",20,00,00,00));
HXDLIN( 103)		_hx_tmp2( ::Dynamic((_hx_tmp3 + addr->__Field(HX_("port",81,83,5c,4a),::hx::paccDynamic))),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),103,HX_("Foo",e6,7e,35,00),HX_("onConnect",8b,f4,2a,ed)));
            	}


void Foo_obj::onResolve( uv_getaddrinfo_t* resolver,int status, addrinfo* res){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_108_onResolve)
HXLINE( 109)		::haxe::Log_obj::trace((HX_("resolve ",b4,7b,b0,0c) + status),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),109,HX_("Foo",e6,7e,35,00),HX_("onResolve",8d,cb,0a,3f)));
HXLINE( 110)		::cpp::Pointer<  addrinfo > addr = ( (::cpp::Pointer<  addrinfo >)(::cpp::Pointer_obj::fromRaw(res)) );
HXLINE( 111)		::cpp::Pointer<  uv_tcp_t > this1 = ( (::cpp::Pointer<  uv_tcp_t >)(malloc(::hx::ClassSizeOf< ::uv_tcp_t  >())) );
HXDLIN( 111)		::cpp::Pointer<  uv_tcp_t > client = this1;
HXLINE( 112)		{
HXLINE( 112)			::cpp::Pointer<  uv_loop_t > this2 = ( (::cpp::Pointer<  uv_loop_t >)(::cpp::Pointer_obj::fromRaw(uv_default_loop())) );
HXDLIN( 112)			 uv_loop_t* loop = this2->get_raw();
HXDLIN( 112)			uv_tcp_init(loop,client->get_raw());
            		}
HXLINE( 113)		::cpp::Pointer<  uv_connect_t > this3 = ( (::cpp::Pointer<  uv_connect_t >)(malloc(::hx::ClassSizeOf< ::uv_connect_t  >())) );
HXDLIN( 113)		::cpp::Pointer<  uv_connect_t > connect = this3;
HXLINE( 114)		{
HXLINE( 114)			 uv_connect_t* req = connect->get_raw();
HXDLIN( 114)			const  sockaddr* dest = ( (const  sockaddr*)(addr->get_value().ai_addr) );
HXDLIN( 114)			::cpp::Function< void  ( uv_connect_t*,int) > cb = ::cpp::Function< void ( uv_connect_t*,int)>(::hx::AnyCast(&::Foo_obj::onConnect ));
HXDLIN( 114)			uv_tcp_connect(req,client->get_raw(),dest,cb);
            		}
HXLINE( 115)		uv_freeaddrinfo(addr->get_raw());
            	}


void Foo_obj::signal( uv_loop_t* loop){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_124_signal)
HXLINE( 126)		::cpp::Pointer<  uv_signal_t > this1 = ( (::cpp::Pointer<  uv_signal_t >)(malloc(::hx::ClassSizeOf< ::uv_signal_t  >())) );
HXDLIN( 126)		::cpp::Pointer<  uv_signal_t > signal1 = this1;
HXLINE( 128)		uv_signal_init(loop,signal1->get_raw());
HXLINE( 130)		::cpp::Pointer<  uv_handle_t > this2 = ( (::cpp::Pointer<  uv_handle_t >)(signal1->reinterpret()) );
HXDLIN( 130)		uv_ref(this2->get_raw());
HXLINE( 132)		{
HXLINE( 132)			::cpp::Function< void  ( uv_signal_t*,int) > cb = ::cpp::Function< void ( uv_signal_t*,int)>(::hx::AnyCast(&::Foo_obj::onStart ));
HXDLIN( 132)			uv_signal_start(signal1->get_raw(),cb,30);
            		}
            	}


void Foo_obj::onStart( uv_signal_t* signal,int signum){
            	HX_STACKFRAME(&_hx_pos_d93a52f3339c65bd_135_onStart)
HXLINE( 136)		::haxe::Log_obj::trace((HX_("Signal recieved: ",27,6e,9e,a3) + signum),::hx::SourceInfo(HX_("Test.hx",8c,21,fb,8a),136,HX_("Foo",e6,7e,35,00),HX_("onStart",c3,12,49,1a)));
HXLINE( 137)		::cpp::Pointer<  uv_signal_t > _signal = ( (::cpp::Pointer<  uv_signal_t >)(::cpp::Pointer_obj::fromRaw(signal)) );
HXLINE( 138)		uv_signal_stop(_signal->get_raw());
HXLINE( 139)		::cpp::Pointer<  uv_handle_t > this1 = ( (::cpp::Pointer<  uv_handle_t >)(_signal->reinterpret()) );
HXDLIN( 139)		uv_unref(this1->get_raw());
            	}



Foo_obj::Foo_obj()
{
}

bool Foo_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"foo") ) { outValue = foo_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Foo_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Foo_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Foo_obj::__mClass;

static ::String Foo_obj_sStaticFields[] = {
	HX_("foo",06,c7,4d,00),
	::String(null())
};

void Foo_obj::__register()
{
	Foo_obj _hx_dummy;
	Foo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Foo",e6,7e,35,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Foo_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Foo_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Foo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Foo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Foo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

